<!DOCTYPE html>
<html>
  <head>
    <!-- Affiliate tracker script: tracks affiliate data asynchronously -->
    <script
      src="https://pushlapgrowth.com/affiliate-tracker.js"
      data-affiliate
      data-program-id="c13c73fe-e93d-4d25-9291-8d2cf7b3f307"
      async>
    </script>

    <!-- Font Awesome stylesheets for icons -->
    <!-- Version 5.15.4 -->
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
      rel="stylesheet" />
    <!-- Version 6.4.2 -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">

    <!-- Tailwind CSS framework for styling -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- Animate.css library for adding animations -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">

    <!-- Swiper.js: styles and script for slider functionality -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css">
    <script src="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js"></script>

    <!-- Alpine.js for lightweight reactive components (loaded with defer for non-blocking) -->
    <script
      src="https://cdn.jsdelivr.net/npm/alpinejs@3.10.2/dist/cdn.min.js"
      defer>
    </script>

    <!-- 1) Provide a global fallback to avoid "ReferenceError: global is not defined" -->
    <script>
      window.global = window;
    </script>

    <!-- 2) Use the browser-friendly Twemoji build (twemoji.min.js) -->
    <script
      src="https://cdn.jsdelivr.net/npm/twemoji@latest/dist/twemoji.min.js"
      crossorigin="anonymous">
    </script>
    <script>
      // Optional: Add your custom Twemoji processing here
      // For example:
      // document.addEventListener("DOMContentLoaded", () => {
      //   twemoji.parse(document.body);
      // });
    </script>
  </head>
  <body>
    <!-- Your main body content goes here -->

    <script>
      // Function to check if the browser supports rendering emojis
      function supportsEmoji() {
        // Create a canvas element to test emoji rendering
        const testCanvas = document.createElement("canvas");
        if (!testCanvas.getContext) return false; // If canvas is not supported, assume no emoji support
        const ctx = testCanvas.getContext("2d");
        ctx.font = "32px Arial";
        // Draw a test character (emoji or placeholder) on the canvas
        ctx.fillText("?", 0, 32);
        // Get the pixel data from the drawn area
        const pixelData = ctx.getImageData(0, 0, 32, 32).data;
        // Check if any pixel channel has a non-zero value, indicating the character rendered properly
        return [...pixelData].some(channel => channel !== 0);
      }

      // After the DOM content is fully loaded, check for emoji support
      document.addEventListener("DOMContentLoaded", function () {
        if (!supportsEmoji()) {
          // If emojis are not supported, use fallback fonts that support emoji rendering
          document.body.style.fontFamily = '"Noto Color Emoji", "Twemoji", sans-serif';
        }
      });
    </script>
  </body>
</html>
